<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-sec3-5-LT-Sage" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Sage Computations</title>

<introduction>
    <p>
        In this section we explain how Sage can be used to explore linear transformations and deal with 
various concepts related to linear transformations that we have learned in this chapter.

<p>
    Sage has a construction <c>linear_transformation()</c> to define a linear transformation. We can define a linear
    transformation in Sage using the following four different ways.
    <ol>
        <li>
            <p>
                <c> linear_transformation(A, side='left')</c> defines a linear transformation as a matrix transformation
                defined by the matrix <m>A</m>. Domain and the codomain and the base space are inferred by the dimension of the matrix and base ring (the ring from on matrix is defined). Side is the keyword
                that can be taken as 'left' or 'right', the default value is 'left'.
            </p>
        </li>
        <li>
            <p>
              <c>linear_transformation(D, C, A, side='left') </c>, this is same as before, however, here domain is taken as <m>D</m> and codomain is taken as <m>C</m>.
                
            </p>
        </li>
        <li>
            <p>
                <c>linear_transformation(D, C, f)</c>, in this case <m>f</m> is the function that is defined 
                on on a basis element of the domain and it produces the elements of the codomain. The linear tranformation is the unique linear transformation that is extended linearly on the domain <m>D</m>.
            </p>
        </li>
        <li>
            <p>
            <c>linear_transformation(D, C, images)</c>, where 'images' is a list or  a  touple of vectors 
            of the codmain, whihc is equal to the size of the basis. Each element of th basis is mapped to the corresponding element of the image.
             </p>
        </li>
    </ol>
</p>
    </p>
</introduction>

<example>
 <title>Linear transformaation defined by a matrix.</title>
 <p>
    Let us define a linear tarnsformatrion defined by a matrix <m>A</m> over a rational numbers.
 </p>

  <sage>
    <input>
        A = matrix(QQ, [[2, -1,3], [-2,3, 5]])
        T = linear_transformation(A,side='right')
        T
    </input>
    <output>
        Vector space morphism represented by the matrix:
        [ 2 -2]
        [-1  3]
        [ 3  5]
        Domain: Vector space of dimension 3 over Rational Field
        Codomain: Vector space of dimension 2 over Rational Field   
    </output>
  </sage>  
  <p>
  Clearly, here <m>T</m> is the matrix tranformatrion defined from <m>\Q^3</m> to <m>\Q^2</m>. We can find, the domain, codmain, parent, images, kernel, that is null space etc using the dot methods. Let us explore some of them. 
  </p>

<sage>
    <input>
    T.domain()
    </input>
    <output>
        Vector space of dimension 3 over Rational Field
    </output>
</sage>

<sage>
    <input>
    T.codomain()
    </input>
    <output>
        Vector space of dimension 2 over Rational Field
    </output>
</sage>

<sage>
    <input>
        T.image()
    </input>
    <output>
        Vector space of degree 2 and dimension 2 over Rational Field
        Basis matrix:
        [1 0]
        [0 1]
    </output>
</sage>

<p> This returns a basis matrix of the image along with the dimension of the image space.  </p>

<sage>
    <input>
        T.matrix(side='right')
    </input>
    <output>
        [ 2 -1  3]
        [-2  3  5]
    </output>
    It returns the matrix of <m>T</m> with respect to the standard basis on domain and codomain. 
    Note that if we do not use the option side='right', we do not get the correct matrix as the 
    defualt is side='left'
</sage>

<sage>
    <input>
        T.parent()
    </input>
    <output>
        Set of Morphisms (Linear Transformations) from Vector space of dimension 3 over Rational Field to Vector space of dimension 2 over Rational Field
    </output>
</sage>
<p> We can find image of any vector using the following Sage syntax.  </p>

<sage>
    <input>
        v = vector(QQ,[1,2,3])
        T(v)
    </input>
    <output>
        (9, 19)
    </output>
</sage>

<sage>
    <input>
        T.kernel()
    </input>
    <output>
        Vector space of degree 3 and dimension 1 over Rational Field
        Basis matrix:
        [   1  8/7 -2/7]
    </output>
</sage>

<p> If we take a vector <m>w</m> in the range space of <m>T</m>, we can find a representative of the <m>T^{-1}(w)</m>.  </p>

<sage>
    <input>
        w = vector(QQ,[2,-10])
        T.preimage_representative(w)
    </input>
    <output>
        (-1, -4, 0) 
    </output>
</sage>

<p> Note that the same linear transformation, we can also define as follows.  </p>

<sage>
    <input>
        T1 = linear_transformation(QQ^3,QQ^2,A,side='right')
        T==T1
    </input>
    <output>
       True 
    </output>
</sage>
</example>

<problem>
    <p>
  Define a matrix <m>A=\left(\begin{array}{rrr}
    -1 \amp  1 \amp  0 \\
    2 \amp  0 \amp  -1 \\
    2 \amp  -1 \amp  1 \\
    0 \amp  2 \amp  1
    \end{array}\right)</m> and define a linear transformation <m>T:\Q^3\to \Q^4</m> by <m>T(x)=Ax</m>. 
    Now define two vectors <m>w_1=(-3, -1, 0, -31/3)</m> and <m>w_2=(1, -1/2, -1, 11/6)</m> . Check that 
    <m>w_1,w_2</m> lie in the image space of <m>T</m>. Let <m>v_1\in T^{-1}(w_1)</m> and <m>v_2\in T^{-1}(w_1)</m>. 
    Show that <m>v_1, v_2</m> are linearly independent in <m>\Q^3</m>.  Can you  generalize this result and prove the 
    same?
</p>
    <sage>
        <input>
        ## Sage Practice Area
        A = matrix([[-1,1,0],[2,0,-1],[2,-1,1],[0,2,1]])
        w1 = vector(QQ,[-3, -1, 0, -31/3])
        w2 = vector(QQ,[1, -1/2, -1, 11/6])
        
        </input>
        <output>
            
        </output>
    </sage>
</problem>

<example>
    <p>
        Let us define a linear transformation <m>T:\Q^4\to\Q^4</m> given by
        <me>
            T(x_1,x_2,x_3,x_4)=\left(\begin{array}{r}
            -x_{1} + 2 \, x_{3} - x_{4} \\
            x_{1} + 3 \, x_{2} + 7 \, x_{3} - 2 \, x_{4} \\
            x_{1} - 3 \, x_{2} - 21 \, x_{3} + 4 \, x_{4} \\
            x_{1} + 6 \, x_{2} + 16 \, x_{3} - 5 \, x_{4}
            \end{array}\right) 
        </me> and explore this in Sage.
    </p>
            <sage>
                <input>
                    V = QQ^4
                    W = QQ^4
                    x1, x2, x3,x4 = var('x1, x2, x3,x4')
                    outputs = [ -x1+ 2*x3-x4,
                                 x1 + 3*x2 + 7*x3-2*x4,
                                 x1 - 3*x2 - 21*x3 + 4*x4,
                                         x1 + 6*x2 + 16*x3 - 5*x4]
                    T_symbolic(x1, x2, x3,x4) = outputs
                    T = linear_transformation(V,W, T_symbolic,side='right')
                    T
                </input>
                <output>
                    Vector space morphism represented by the matrix:
                    [ -1   1   1   1]
                    [  0   3  -3   6]
                    [  2   7 -21  16]
                    [ -1  -2   4  -5]
                    Domain: Vector space of dimension 4 over Rational Field
                    Codomain: Vector space of dimension 4 over Rational Field 
                </output>
            </sage>
       
            <sage>
                <input>
                    print('The image of T is:\n')
                    print(T.image())
                    print('The kernel of T is:\n')
                    print(T.kernel())
                </input>
                <output>
                    The image of T is:

                    Vector space of degree 4 and dimension 3 over Rational Field
                    Basis matrix:
                    [1 0 0 1]
                    [0 1 0 2]
                    [0 0 1 0]
                    The kernel of T is:
                    
                    Vector space of degree 4 and dimension 1 over Rational Field
                    Basis matrix:
                    [ 1 -1  0 -1]  
                </output>
            </sage>
       
            <sage>
                <input>
                    T.matrix(side='right')
                </input>
                <output>
                    [ -1   0   2  -1]
                    [  1   3   7  -2]
                    [  1  -3 -21   4]
                    [  1   6  16  -5]
                </output>
            </sage>
       
       <p>  Next we find the matrix of <m>T</m> with respect to a bases <m>\beta</m> on the domain and 
        a basis <m>\gamma</m> on the codomain.  </p>

        <sage>
            <input>
                ## Basis of domain,say, B=[u1,u2,u3,u4]
                u1 = vector(QQ, [ 1, -3,  2, -1])
                u2 = vector(QQ, [ 0,  1,  0,  1])
                u3 = vector(QQ, [-1,  2, -1, -1])
                u4 = vector(QQ, [ 2, -8,  4, -3])
                B = [u1,u2,u3,u4]
                ## Checking if B is linearly dependent
                V.linear_dependence(B) 
            </input>
            <output>
                [
                
                ]
            </output>
        </sage>
        
        <sage>
            <input>
                ## Basis of codomain, say,C=[w1,w2,w3,w4]
                w1 = vector(QQ, [ 2, -3,  2, -1])
                w2 = vector(QQ, [ 1,  2,  -1, 3])
                w3 = vector(QQ, [ 1,  -1, 5, 1])
                w4 = vector(QQ, [ 0, -4,  3, 2])
                C = [w1, w2, w3, w4]
                ## Checking if C is linearly dependent
                W.linear_dependence(C)
            </input>
            <output>
            [
            
            ]
            </output>
        </sage>
        
        <p> Now we define a subspace <m>V_1</m> of <m>V</m> with B as a basis 
        and a subspace <m>W_1</m> of <m>W</m> with C as a basis. After that 
        we rectrict T on to <m> V_1</m> on its domain and <m>W_1</m> on its codomain. 
        We call this restriction as <m>T_1</m>. The matrix of <m>T_1</m> is the matrix of 
        <m>T</m> with respect to <m>\beta</m> on domain and <m>\gamma</m> on codmain, that is 
        <m>[T]_\beta^\gamma</m>. 
    </p>

            <sage>
                <input>
                    V1 = V.subspace_with_basis(B)
                    W1 = W.subspace_with_basis(C)
                    T1=T.restrict_domain(V1).restrict_codomain(W1)
                    MBC=T1.matrix(side='right');MBC   
                </input>
                <output>
                    [  328/175  -114/175      -4/5   872/175]
                    [   204/25     -2/25      -4/5    371/25]
                    [-1384/175    67/175      12/5 -2766/175]
                    [  464/175    18/175      -2/5   811/175]  
                </output>
            </sage>
         <p>    Note that the matrix <m>[T]_\beta^\gamma</m> can also be obtained by
            defining a column matrix whose columns are <m>w_1,w_2,w_3,w_4, T(v_1), T(v_2), T(v_3), T(v_4)</m>, then applying RREF and extracting the last four columns.  
                </p>
            
                <sage>
                    <input>
                        M = column_matrix([w1,w2,w3,w4,T(u1),T(u2),T(u3),T(u4)]).rref()
                        print(M)
                        M.submatrix(0,4)
                    </input>
                    <output>
                        [  328/175  -114/175      -4/5   872/175]
                        [   204/25     -2/25      -4/5    371/25]
                        [-1384/175    67/175      12/5 -2766/175]
                        [  464/175    18/175      -2/5   811/175] 
                    </output>
                </sage>
        

                <p>
                The image of <m>T</m> can also be obtained by using RREF  of the matrix whose rows 
                are vectors <m>T(u1),T(u2),T(u3),T(u4)</m>.   </p>

                <sage>
                    <input>
                    column_matrix([T(u1),T(u2),T(u3),T(u4)]).T.rref()
                    </input>
                    <output>
                        [1 0 0 1]
                        [0 1 0 2]
                        [0 0 1 0]
                        [0 0 0 0]
                    </output>
                </sage>
                
                <p> Note that the first three rows of this is sage as what we get using <c>T.image()</c>.
                </p>

                <p>
                    <alert>Reshufle the basis elements.</alert> Let us see what happens to the matrix 
                    of a linear transformation when we reshuffle the elemnts of a basis on domain and codomain.
                    Let us find the matrix of the abobe linear transformation with resepect the basis 
                    <m>\beta_1 =\{u_1,u_3,u_2,u_4\}</m> of the domain and <m>\gamma</m> of the codomain. Here we have interchanged 2nd and 3rd basis elements of <m>\beta</m>.  You may also explore with other interchanges.
                </p>
                
                
                        <sage>
                            <input>
                                ## interchanging 2nd and 3rd elements of domain basis
                                B1 = [u1,u3,u2,u4]
                                V2 = V.subspace_with_basis(B1)
                                T2=T.restrict_domain(V2).restrict_codomain(W1)
                                MB1C=T2.matrix(side='right');MB1C    
                            </input>
                            <output>
                                [  328/175      -4/5  -114/175   872/175]
                                [   204/25      -4/5     -2/25    371/25]
                                [-1384/175      12/5    67/175 -2766/175]
                                [  464/175      -2/5    18/175   811/175]    
                            </output>
                        </sage>
                        <p> Clearly in this case 2nd and 3rd columns of <m>[T]_\beta^\gamma</m> are interchanged.
                    </p>
            
            
                    <sage>
                        <input>
                            ## interchanging 2nd and 3rd elements of codomain basis
                            C1 = [w1,w3,w2,w4]
                            W2=V.subspace_with_basis(C1)
                            T3=T.restrict_domain(V1).restrict_codomain(W2)
                            MBC1=T3.matrix(side='right');MBC1
                        </input>
                        <output>
                            [  328/175  -114/175      -4/5   872/175]
                            [-1384/175    67/175      12/5 -2766/175]
                            [   204/25     -2/25      -4/5    371/25]
                            [  464/175    18/175      -2/5   811/175]  
                        </output>
                    </sage>
                 <p>
                    Clearly in this case 2nd and 3rd rows of <m>[T]_\beta^\gamma</m> are interchanged.
                </p>

</example>

</section>
