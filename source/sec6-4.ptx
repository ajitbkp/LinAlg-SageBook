<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec6-4" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>QR-Factorization</title>

 

  <p>
    Let <m>A</m> be an <m>m\times n</m> matrix whose columns are <m>a_1,\ldots, a_n</m>.
    Further assume that columns of <m>A</m> are linearly independent.
    Using the Gram-Schmidt orthogonalization process
    <md>
      <mrow>u_1:\amp = a_1</mrow>
      <mrow>u_2:\amp = a_2 -\frac{a_2\cdot u_1}{\norm{u_1}^2}u_1 </mrow>
      <mrow>  \vdots\amp</mrow>
      <mrow>u_k: \amp=a_k-\frac{a_k\cdot u_1}{\norm{u_1}^2}u_1-\cdots -
        \frac{a_k\cdot u_{k-1}}{\norm{u_{k-1}}^2}u_{k-1}</mrow>
      <mrow>   \vdots\amp </mrow>
    </md>

    and  define <m>q_k:= \frac{u_k}{\norm{u_k}}, k=1,\ldots, n</m>.
    This implies
    <md>
      <mrow>\norm{u_k}q_k \amp =  u_k = a_k-\frac{a_k\cdot u_1}{\norm{u_1}^2}u_1-\cdots -\frac{a_k\cdot u_{k-1}}{\norm{u_{k-1}}^2}u_{k-1}</mrow>
      <mrow>\amp =a_k-(a_k\cdot q_1)q_1-(a_k\cdot q_2)q_2+\cdots - (a_k\cdot q_{k-1})q_{k-1}</mrow>
    </md>.
  </p>

  <p>
    Hence
    <me>
      a_k = (a_k\cdot q_1)q_1+(a_k\cdot q_2)q_2+\cdots + (a_k\cdot q_{k-1})q_{k-1}+\norm{u_k}q_k, k=1,2,\ldots, n
    </me>.
  </p>

  <p>
    Thus we have
    <md>
      <mrow>a_1: = \amp \norm{u_1}q_1</mrow>
      <mrow>a_2:  = \amp (a_2\cdot q_1)q_1+\norm{u_2}q_2</mrow>
      <mrow> \amp  \vdots</mrow>
      <mrow>a_k: =\amp (a_k\cdot q_1)q_1+(a_k\cdot q_2)q_2+\cdots + (a_k\cdot q_{k-1})q_{k-1}+\norm{u_k}q_k</mrow>
      <mrow>\amp \vdots</mrow>
    </md>
  </p>

  <p>
    Thus
    <md>
      <mrow>A \amp = [a_1~~a_2~~a_3~~\cdots~~a_n]</mrow>
      <mrow>\amp =  [q_1~~q_2~~q_3~~\cdots~~q_n] 
        \begin{bmatrix}\norm{u_1} \amp  a_2\cdot q_1 \amp   a_3\cdot q_1\amp  \cdots \amp  a_n\cdot q_1\\ 
        0\amp   \norm{u_2} \amp  a_3\cdot q_2 \amp   \cdots \amp  a_n\cdot q_2\\
        0\amp 0   \amp  \norm{u_3}\amp   \cdots \amp  a_n\cdot q_3\\ 
        \vdots \amp  \vdots \amp  \vdots \amp  \ddots \amp  \vdots\\ 0\amp  0 \amp  0 \amp  \cdots \amp  \norm{u_n} \end{bmatrix}</mrow>
      <mrow>\amp =QR</mrow>
    </md>
  </p>

  <p>
    Here <m>Q</m> has orthogonal columns and <m>R</m> is upper triangular whose diagonal entries  are positive,
    hence non-singular.
    This is what is known as <m>QR</m> factorization.
    Thus we have the following result.
  </p>

  <theorem>
    <statement>
      <p>
        Every <m>m\times n</m> matrix with linearly independent columns has a <m>QR</m> factorization,
        <m>A=QR</m>,
        where columns of <m>Q</m> are orthonormal and <m>R</m> is an upper triangular matrix with positive diagonal entries.
      </p>
    </statement>
  </theorem>

  <example xml:id="QR-eg1">
    <statement>
      <p>
        Let <m>A = \begin{pmatrix}0 \amp  1 \amp  1\\ 1 \amp  1 \amp  -2\\ 1 \amp  1 \amp  2 \end{pmatrix} = \begin{bmatrix}a_1 \amp  a_2 \amp  a_3 \end{bmatrix}</m>.
        Let us find the <m>QR</m> factorization of <m>A</m>.
        Note that columns of <m>A</m> are vectors
        <m>v_1, v_2, v_3</m> in the <xref ref="gram-schmidt-eg1">Example</xref>.
        We have found <m>q_1, q_2, q_3</m> in this example.
        Hence
        <me>
          Q = \begin{bmatrix}q_1 \amp  q_2 \amp  q_3 \end{bmatrix}  = \begin{pmatrix}0            \amp  1 \amp  0 \\ \frac{1}{\sqrt{2}} \amp  0 \amp  \frac{-1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}} \amp   0 \amp  \frac{1}{\sqrt{2}} \end{pmatrix}
        </me>.
        We also have
        <me>
          u_1= (0, 1, 1), u_2=(1,0,0), u_3=(0,-2,2)
        </me>
      </p>
      <p>
        Hence
        <me>
          R = \begin{pmatrix}\norm{u_1} \amp  a_2 \cdot q_1 \amp  a_3 \cdot q_1\\ 0 \amp  \norm{u_2} \amp  a_3 \cdot q_2\\ 0  \amp  0 \amp  \norm{u_3} \end{pmatrix}  = \begin{pmatrix}\sqrt{2} \amp  \sqrt(2) \amp  0\\ 0 \amp  1 \amp  1 \\ 0 \amp   0 \amp  2\sqrt{2} \end{pmatrix}
        </me>
      </p>
      <p>
        Note that once we have <m>Q</m>, then <m>R = Q^TA</m>.
      </p>
    </statement>
  </example>

  <example>
    <statement>
      <p>
        Find the QR-factorization of <m>A=\left(\begin{array}{rrr} -1 \amp  1 \amp  -1 \\ 1 \amp  -1 \amp  0 \\ 0 \amp  0 \amp  2 \\ 1 \amp  1 \amp  1 \end{array} \right)=\begin{bmatrix}a_1\amp  a_2\amp  a_3 \end{bmatrix}</m>.
        It is easy to check that columns of <m>A</m> are linearly independent.
        In fact, columns of <m>A</m> are rows of the matrix defined in the Example<nbsp/><xref ref="gram-schmidt-eg2"/>.
        From this example, we have
        <me>
          u_1 = \begin{pmatrix}-1\\ 1\\ 0\\ 1 \end{pmatrix}, 
          q_1 = \begin{pmatrix}-\frac{1}{\sqrt{3}}\\\frac{1}{\sqrt{3}}\\0\\\frac{1}{\sqrt{3}} \end{pmatrix}, 
          u_2 = \begin{pmatrix}2/3\\ -2/3\\ 0\\ 4/3 \end{pmatrix},
        </me>
        <me> q_2 = \begin{pmatrix}\frac{1}{\sqrt{6}}\\ -\frac{1}{\sqrt{6}}\\0\\\sqrt{\frac{2}{3}} \end{pmatrix}, 
          u_3 = \begin{pmatrix}-1/2\\-1/2\\2\\0 \end{pmatrix}, 
          q_3 = \begin{pmatrix}-\frac{1}{3} \, \sqrt{\frac{1}{2}}\\-\frac{1}{3} \, \sqrt{\frac{1}{2}}\\\frac{4}{3} \, \sqrt{\frac{1}{2}}\\0 \end{pmatrix}
        </me>
      </p>
      <p>
        Hence
        <me>
          Q = [q_1~q_2~q_3]=\left(\begin{array}{rrr} -\frac{1}{3} \, \sqrt{3} \amp  \frac{1}{2} \, \sqrt{\frac{2}{3}} \amp  -\frac{1}{3} \, \sqrt{\frac{1}{2}} \\ \frac{1}{3} \, \sqrt{3} \amp  -\frac{1}{2} \, \sqrt{\frac{2}{3}} \amp  -\frac{1}{3} \, \sqrt{\frac{1}{2}} \\ 0 \amp  0 \amp  \frac{4}{3} \, \sqrt{\frac{1}{2}} \\ \frac{1}{3} \, \sqrt{3} \amp  \sqrt{\frac{2}{3}} \amp  0 \end{array} \right)
        </me>.
        Also
        <me>
          R = Q^TA=\left(\begin{array}{rrr} \sqrt{3} \amp  -\frac{1}{3} \, \sqrt{3} \amp  \frac{2}{3} \, \sqrt{3} \\ 0 \amp  2 \, \sqrt{\frac{2}{3}} \amp  \frac{1}{2} \, \sqrt{\frac{2}{3}} \\ 0 \amp  0 \amp  3 \, \sqrt{\frac{1}{2}} \end{array} \right)
        </me>.
      </p>
    </statement>
  </example>

  <remark>
    <p>
      If a matrix <m>A</m> has independent rows,
      then we apply <m>QR</m> factorization to <m>A^T</m>.
      Thus
      <me>
        A^T = (QR)^T=R^TQ^T=LP
      </me>
      where <m>L</m> is the the invertible lower triangular matrix with positive diagonal entries and and <m>P</m> has orthogonal rows.
    </p>
  </remark>

  <remark>
    <p>
      In case a matrix <m>A</m> has linearly independent columns then the <m>QR</m> factorization is unique.
      That is, if <m>A= Q_1R_1=Q_2R_2</m>,
      then <m>Q_1=Q_2</m> and <m>R_1=R_2</m>.
    </p>
  </remark>

  
  <exercise>
    <statement>
      <p>
        Find the QR-factorization of the following matrices:
        <me>
          \begin{bmatrix}2 \amp  1 \\ 1 \amp  1  \end{bmatrix} ,  
          \begin{bmatrix}1 \amp  -1 \amp  1\\ 2 \amp  0  \amp  1\\2 \amp  1 \amp  -2 \end{bmatrix} , 
          \begin{bmatrix}1 \amp  1 \amp  0 \\-1 \amp  0 \amp 1\\0 \amp  1 \amp  1\\1 \amp  -1 \amp  0 \end{bmatrix}
        </me>
      </p>
    </statement>
  </exercise>
<activity><title>Sage Routine for QR-factorization </title>
<sage>
  <input>
    # QR factorization using Classical Gram-Schmidt in Sage

def QR_GS(A):
    m, n = A.nrows(), A.ncols()
    Q = Matrix(A.base_ring(), m, n)
    R = Matrix(A.base_ring(), n, n)
    
    for j in range(n):
        v = A.column(j)
        for i in range(j):
            R[i,j] = Q.column(i).dot_product(A.column(j))
            v = v - R[i,j] * Q.column(i)
        R[j,j] = v.norm()
        if R[j,j] == 0:
            raise ValueError("Matrix has linearly dependent columns")
        Q.set_column(j, v / R[j,j])
    return Q, R

  </input>
  <output>
    
  </output>
</sage>

<sage>
  <input>
    
# Example usage:
A = matrix(RR, [
    [1, 1,  1],
    [1, 2, -1],
    [1, -1, 2],
    [1, 3,  4]
])

Q, R = QR_GS(A)

print("Matrix A:")
print(A)
print("\nMatrix Q (orthonormal columns):")
print(Q)
print("\nMatrix R (upper triangular):")
print(R)
print("\nCheck Q^T Q = I:\n", (Q.transpose()*Q).apply_map(lambda x:round(x,2)))
print("Check A = Q*R:", Q*R == A)


  </input>
  <output>
    
  </output>
</sage>
<p>
  Sage has in inbuilt function to find the <m>QR</m>-factorization. Let us demonstrate this. 
</p>

<sage>
  <input>
    A = matrix(QQbar, [[-3, 0, -4, -1, -2],
                       [-1, 1, -5, -2, -3],
                       [2, 1, 7, 4, 5],
                       [6, -5, 8, 3, 3],
                       [-2, 2,-6, -6, 5]])
    Q, R = A.QR()
    print('The matrix Q is')
    print(Q)
    print('The matrix R is')
    print(R)
    print('Check if QR=A')
    print(Q*R==A)
  </input>
  <output>
    
  </output>
</sage>  
</activity>

</section>
