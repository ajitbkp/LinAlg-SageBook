<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-sec4-5-VS-Sage" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Sage Computations</title>

<introduction>
    <p>
        In this section, we demonstrate how Sage can be utilized to define vector spaces and perform computations involving vectors. We shall explore various concepts related to vector spaces that have been introduced in this chapter. The majority of the computations will be carried out in the vector spaces 
        <m>\mathbb{Q}^n</m>, <m>\mathbb{R}^n</m> and 
        <m>\mathbb{C}^n</m>. Additionally, we shall examine certain concepts pertaining to the vector space <m>{\mathcal{P}}_n(\mathbb{R})</m>.         
    </p> 
    <p>
        To define a vector space <m>\mathbb{Q}^n</m> in Sage, one may use <c>QQ^n</c> or <c>VectorSpace(QQ, n)</c>. Similarly, the vector spaces  <m>\mathbb{Q}^n</m> and <m>\mathbb{C}^n</m> can be defined using <c>RR^n</c> and <c>CC^n</c>, respectively. Sage provides built-in functions for generating the linear span of a set of vectors, checking their linear dependence, and determining the coordinates of a vector with respect to a given basis. Nevertheless, we will also employ the Reduced Row Echelon Form (RREF) to explore various concepts such as subspaces, linear dependence and independence, and the computation of coordinates.
    </p>
</introduction>

<example label="sec4-5-VS-eg1">
 <title>Vector space <m>\mathbb{Q}^6</m></title>
 <statement>
    <p>
     Let us define the vector space <m>\mathbb{Q}^6</m> and explore the various concepts in Sage. 

     Define 5 vectors <m>v_1=\left(1,\,-1,\,2,\,3,\,1,\,4\right)
</m>, <m>v_2=(\left(2,\,1,\,0,\,2,\,-3,\,1\right),)
</m>, <m>v_3=(\left(-4,\,-5,\,4,\,0,\,11,\,5\right),)
</m>, <m>v_4=(\left(-1,\,0,\,2,\,1,\,3,\,2\right),)
</m> and <m>v_5=(\left(-2,\,-2,\,4,\,2,\,7,\,5\right),)
</m>. Find the linear span of <m>B=\{v_1,v_2,v_3,v_4,v_5\}</m>. Check of <m>B</m> is a linearly independent set. 
    </p>
 </statement>
</example>
 <p>
    We can use the following sage commands to define the <m>\mathbb{Q}^6</m>.
 </p>

 <sage>
    <input>
        V = QQ^4;V
    </input>
    <output>
        Vector space of dimension 6 over Rational Field       
    </output>
 </sage>
 
 <sage>
    <input>
        V = VectorSpace(QQ,6);V
    </input>
    <output>
        Vector space of dimension 6 over Rational Field       
    </output>
 </sage>
 Let explore few methods on the object <c>V</c>. Use can use V.TAB to get the 
 drop down menue of methods.

 <sage>
    <input>
     V.an_element()  # Returns an element of this parent V.
      </input>
    <output>
        
    </output>
 </sage>

 <sage>
    <input>
        V.random_element() # Returns a random vector of V.
    </input>
    <output>
        
    </output>
 </sage>
The following methods returns the base filed (Rational Field in this case).
 <sage>
    <input>
        V.base()
        V.base_field()
    </input>
    <output>
        
    </output>
 </sage>

 <sage>
    <input>
        V1 = V.base_extend(RR) # Used to extend the base field to real field.
        V1.random_element()
    </input>
    <output>
        
    </output>
 </sage>

 <sage>
    <input>
        V.basis_matrix() # Returns the basis matrix of V.
    </input>
    <output>
        
    </output>
 </sage>

 <sage>
    <input>
        V.basis() # Returns the standard basis of V.
    </input>
    <output>
        
    </output>
 </sage>

 <sage>
    <input>
        V.dimension() # Returns the dimension of V.
    </input>
    <output>
        
    </output>
 </sage>
 <p> 
    Try to explore more methods on the object <c>V</c>.
 </p>

 <p>
    Now let us define vectors in <m>V</m>.
 </p>

 <sage>
    <input>
        V = QQ^6
        v1 = vector([1,-1,2,3,1,4])
        v2 = vector([2,1,0,2,-3,1])
        v3 = vector([-4,-5,4,0,11,5])
        v4 = vector([-1,0,2,1,3,2])
        v5 = vector([-2,-2,4,2,7,5])
        v1 in V
    </input>
    <output>
        
    </output>
 </sage>
 <p> 
    Next, let us define the linear span of <m>B=\{v_1,\ldots, v_5\}</m>.
 </p>

 <sage>
    <input>
        B = [v1,v2,v3,v4,v5]
        W = V.span(B)
        W
    </input>
    <output>
        
    </output>
 </sage>
 <p>
    We can check if <c>W</c> is a subspace of <c>V</c>.
 </p>
 <sage>
    <input>
        W.is_subspace(V)
    </input>
    <output>
        
    </output>
 </sage>
 <p>
    Note that a basis of the <m>L(B)</m> can be also obtained by 
 applying RREF on the matrix whose rows are vectors, <m>v_1,\ldots, v_5</m>.
 </p>

 <sage>
    <input>
        A = column_matrix([v1,v2,v3,v4,v5]).T
        A.rref()
    </input>
    <output>
        
    </output>
 </sage>
 <p>
    Notice that the 1st three rows of the above output consitute the 
    basis of the <m>L(B</m>.
 </p>

 <p>
    Next let us check whether the set of vecors <m>B</m> is linearly dependent using the following Sage syntax.
 </p>

 <sage>
    <input>
        S = V.linear_dependence(B);S
    </input>
    <output>
        
    </output>
 </sage>
 <p>
    If the set is linearly indepensent then <c>S = V.linear_dependence(B);S</c> returns an empty list. However, if <m>B</m> is linearly dependent then 
    it returs a list of scalars (possibly more than on1), say <m>\alpha_1,\cdots,\alpha_5</m> such that <m>\sum v_i\alpha_i=0</m>. Let us verift the same.
 </p>

 <sage>
    <input>
        print(V.linear_combination([(B[i],S[0][i]) for i in range(5)]))
        print(V.linear_combination([(B[i],S[1][i]) for i in range(5)]))
    </input>
    <output>
        
    </output>
 </sage>

 <exercise>
        <statement>
            <p>
                Repeat the above example on the vector space <m>\mathbb{R}^6</m>.
            </p>
        </statement>
     </exercise>

     <example>
        <statement>
            <p>
                Let <m>V=\mathbb{Q}^4</m> be a vector space. Let <m>{\cal B}=\{(1,0,0,0),(1,1,0,0,),(1,0,-1,0),(0,0,0,1)\}</m>. Check if <m>{\cal B}</m> is linearly independent. 
Consider a vector <m>v=(-1,2,3,-2)</m>. Find the coordinates of <m>v</m> with respect to <m>{\cal B}</m>.  

            </p>
        </statement>

     </example>

     <solution>
        <p>
            Let us solve this problem in Sage.
        </p>

        <sage>
            <input>
                V=QQ^4
                v1=vector(QQ,[1,0,0,0])
                v2=vector(QQ,[1,1,0,0])
                v3=vector(QQ,[1,0,-1,0])
                v4=vector(QQ,[0,0,0,1])
                B=[v1,v2,v3,v4]
                S = V.linear_dependence(B);S
            </input>
            <output>
                
            </output>
        </sage>
        <p>
            Since <m>S</m> is an empty list, <m>B</m> is a linearly independent set.
        </p>

        <p>
            Next, we define a subspace with <m>B</m> as a basis and then 
            find the coordinates of the vector <m>v</m> with respect to <m>B</m>.
        </p>

        <sage>
            <input>
                V=V.subspace_with_basis(B)
                v=vector(QQ,[-1,2,3,-2])
                V.coordinates(v)
            </input>
            <output>
                
            </output>
        </sage>

        <p>
            We can also find the coordinate vector of <m>v</m>. 
        </p>

        <sage>
            <input>
                V.coordinate_vector(v)
            </input>
            <output>
                
            </output>
        </sage>
        We cal also find the coordinates of <m>v</m> using RREF.

        <sage>
            <input>
                column_matrix(B).augment(v,subdivide=True).rref()
            </input>
            <output>
                
            </output>
        </sage>
        The last columns of the above output is the coordinate vector.
     </solution>

     <example>
        <statement>
            <p>
              Let <m>V=\mathbb{Q}^4</m> be a vector space. Let <me>
                {\cal B}=\{(1,0,0,0),(1,1,0,0,),(1,0,-1,0),(0,0,0,1)\}
              </me>
               and
<me>{\cal C}=\{(1,1,1,0),(1,1,0,1),(1,0,1,1),(1,1,1,-1)\}</me> be two bases of <m>V</m>. Find the change of basis matrix <m>M_{\cal B}^{\cal C}</m> and the change of basis matrix <m>M_{\cal C}^{\cal B}</m>. Consider a vector <m>v=(-1,2,3,-2)</m>. Suppose <m>c_{\cal B}</m> be the coordinate vector of <m>v</m> with respect to the basis <m>{\cal B}</m> and <m>v_{\cal C}</m> be the coordinate vector of <m>v</m> with respect to the basis <m>{\cal C}</m>. Verify that <m>v_{\cal C}=M_{\cal B}^{\cal C}v_{\cal B}</m>.
            </p>
        </statement>
     </example>

     <solution>
        <p>
            Let us solve the above problem in Sage. Note that 
            the matrix <m>M_{\cal B}^{\cal C}</m> can be obtained in many ways.
            One way, is to find this by writing the matrix of whose columns are 
            the coordinate vectors of each vector in <m>{\cal B}</m> with respect
            to <m>{\cal B}</m>.  

            Alternatively, we can use RREF on <m>[{\cal C}~ {\cal B}</m> and 
            take the last four columns of the same.
    
        </p>

        <sage>
            <input>
                V=QQ^4
                v1=vector(QQ,[1,0,0,0])
                v2=vector(QQ,[1,1,0,0])
                v3=vector(QQ,[1,0,-1,0])
                v4=vector(QQ,[0,0,0,1])
                B=[v1,v2,v3,v4]
                V=V.subspace_with_basis(B)
                v=vector(QQ,[-1,2,3,-2])
                v_B=V.coordinate_vector(v)
                print(v_B)
            </input>
            <output>
                
            </output>
        </sage>

        <sage>
            <input>
                V=QQ^4
                w1=vector(QQ,[1,1,1,0])
                w2=vector(QQ,[1,1,0,1])
                w3=vector(QQ,[1,0,1,1])
                w4=vector(QQ,[1,1,1,-1])
                C=[w1,w2,w3,w4]
                W=V.subspace_with_basis(C)
                v=vector(QQ,[-1,2,3,-2])
                v_C=W.coordinate_vector(v)
                print(v_C)
            </input>
            <output>
                
            </output>
        </sage>

        <sage>
            <input>
                M_BC=column_matrix([W.coordinates(B[i]) for i in range(4)])
                print(M_BC)
            </input>
            <output>
                
            </output>
        </sage>
        <p>
            Next we find the change of basis matrix using RREF.
        </p>

        <sage>
            <input>
                BB=column_matrix(B)
                CC=column_matrix(C)
                NN=CC.augment(BB,subdivide=True)
                NN.rref()[:,4:]
            </input>
            <output>
                
            </output>
        </sage>

        <sage>
            <input>
                M_CB=column_matrix([V.coordinates(C[i]) for i in range(4)])
                print(M_CB)
            </input>
            <output>
                
            </output>
        </sage>

        <sage>
            <input>
                BB=column_matrix(B)
                CC=column_matrix(C)
                MM=BB.augment(CC,subdivide=True) 
                MM.rref()[:,4:]
            </input>
            <output>
                
            </output>
        </sage>

        <p>
            Let us verify that <m>v_{\cal C}=M_{\cal B}^{\cal C}v_{\cal B}</m>.
        </p>

        <sage>
            <input>
                v_C==M_BC*v_B
            </input>
            <output>
                
            </output>
        </sage>

        <p>
            The change of basis matrix <m>M_{\cal B}^{\cal C}</m>, can be also 
            otained by finding the matrix of the identity linear  transformation 
            <m>Id: \mathbb{Q}^4\to \mathbb{Q}^4</m> and find its matrix with respect to the basis <m>{\cal B}</m> of the domain and <m>{\cal C}</m> on the codomain.
        </p>

        <sage>
            <input>
                V = QQ^4
                T = linear_transformation(identity_matrix(4),V,V)
                v1=vector(QQ,[1,0,0,0])
                v2=vector(QQ,[1,1,0,0])
                v3=vector(QQ,[1,0,-1,0])
                v4=vector(QQ,[0,0,0,1])
                B=[v1,v2,v3,v4]
                U=V.subspace_with_basis(B)
                w1=vector(QQ,[1,1,1,0])
                w2=vector(QQ,[1,1,0,1])
                w3=vector(QQ,[1,0,1,1])
                w4=vector(QQ,[1,1,1,-1])
                C=[w1,w2,w3,w4]
                W=V.subspace_with_basis(C)
                S = T.restrict_domain(U).restrict_codomain(W)
                S.matrix(side='right')
            </input>
            <output>
                
            </output>
        </sage>
     </solution>

     <example>
        <title>The Dimesnion Formula</title>
        <statement>
            <p>
 Let <m></m>.  Let  <m>W_1</m> be a subspace spanned by <m>v_1=(-3, 1, -1, 2), v_2=(1, -1, 11, 3),  v_3=(-5, 1, 9, 7), v_4=(-1, 12, 5, 4)</m> and <m>W_2</m> be the subspace spanned by vectors <m>u_1=(3, -1, 5,  7), u_2 =(21, 11, 10, -13), u_3=(-2, 3, -51, 7), u_4=(-17, -10, -51, 34)</m>. Find bases and dimensions of  subspace <m>W_1+W_2</m> and <m>$W_1\cap W_2</m>.
            </p>
        </statement>
        
     </example>

     <solution>
        <p>
            Let us solve the above problem using Sage.
        </p>

        <sage>
            <input>
                V = QQ^4 # vector space of dimension 4 over rational field
                v1=vector(QQ,[-3, 1, -1, 2])
                v2=vector(QQ,[1, -1, 11, 3])
                v3=vector(QQ,[-5, 1, 9, 7])
                v4=vector(QQ,[-1, 12, 5, 4])
                B1=[v1,v2,v3,v4]
                ## W1, Subspace spanned by v1,v2,v3,v4
                W1=V.span(B1);
                C1=W1.basis_matrix() # Basis of W1
                k=C1.dimensions()[0] # dimension of W1
            </input>
            <output>
                
            </output>
        </sage>

        <sage>
            <input>
                print("The dimesion of W1 is {}".format(k))
                print("A basis of W1 is:")
                print(C1)
            </input>
            <output>
                
            </output>
        </sage>

        <sage>
            <input>
                u1=vector(QQ,[3, -1, 5,  7])
                u2 =vector(QQ,[21, 11, 10, -13])
                u3=vector(QQ,[-2, 3, -51, 7])
                u4=vector(QQ,[-17, -10, -51, 34])
                B2=[u1,u2,u3,u4]
                ## W2, Subspace spanned by u1,u2,u3,u4
                W2=V.span(B2);
                C2=W2.basis_matrix() # Basis of W2
                p=C2.dimensions()[0] # dimension of W2
            </input>
            <output>
                
            </output>
        </sage>

        <sage>
            <input>
                print("The dimesion of W2 is {}".format(p))
                print("A basis of W2 is:")
                print(C2)
            </input>
            <output>
                
            </output>
        </sage>
            <p>
                <c>W1+W2</c> returns the space <m>W_1+W_2</m>.
            </p>
        
        <sage>
            <input>
                print(W1+W2)
                print((W1+W2).basis_matrix())
                print("The dimension of W1+W2 is {}".format(dimension(W1+W2)))
            </input>
            <output>
                
            </output>
        </sage>

        <p>Intersection of W1 and W2 using the inbuilt sage function <c>intersection</c></p>

        <sage>
            <input>
                U=W1.intersection(W2)
                print(U.basis_matrix()) # The basis of the intersection of W1 and W2
            </input>
            <output>
                
            </output>
        </sage>

        <p>
            Finally, we can verify the dimension formula.
        </p>

        <sage>
            <input>
                dimension(W1+W2)==dimension(W1)+dimension(W2)-dimension(W1.intersection(W2))
            </input>
            <output>
                
            </output>
        </sage>
     </solution>
</section>
